package core

import (
	"fmt"
	"reflect"
	"github.com/wiless/gocomm"
	"github.com/wiless/gocomm/chipset"
	"github.com/wiless/vlib"
	"log"
)

func init() {
	log.Print("BER Init")
}

type BER struct {
	name          string
	isInitialized bool
	Pins          map[string]chipset.PinInfo
	Modules       map[string]chipset.ModuleInfo
	ModuleNames   map[int]string
	PinNames      map[int]string
	TrueBits      vlib.VectorB
	ErrorCount    float64
	lastIndex     int
}

func (b *BER) Reset() {
	b.ErrorCount = 0
	b.lastIndex = 0
}

/// AutoGenerated through script

func (m BER) InPinCount() int {
	return 1
}

func (m BER) OutPinCount() int {
	return 1
}

func (m BER) Pin(pid int) chipset.PinInfo {
	return m.Pins[m.PinNames[pid]]
}

func (m BER) PinIn(pid int) chipset.PinInfo {
	if pid >= m.InPinCount() {
		fmt.Printf("%d > No of Input Pins %d", pid, m.InPinCount())
		var result chipset.PinInfo
		result.Id = -1
		return result
	}

	return m.Pins[m.PinNames[pid]]

}
func (m BER) PinByID(pid int) chipset.PinInfo {

	return m.Pins[m.PinNames[pid]]
}

func (m BER) PinOut(pid int) chipset.PinInfo {
	if pid >= m.OutPinCount() {
		fmt.Printf("%d > No of Output Pins %d", pid, m.OutPinCount())
		var result chipset.PinInfo
		result.Id = -1
		return result
	}
	return m.Pins[m.PinNames[pid+m.InPinCount()]]

}

func (m BER) PinByName(pinname string) chipset.PinInfo {
	return m.Pins[pinname]
}

func (m BER) ModulesCount() int {
	return 1
}
func (m BER) ModuleByName(mname string) chipset.ModuleInfo {
	return m.Modules[mname]
}

func (m BER) Module(moduleid int) chipset.ModuleInfo {
	return m.ModuleByName(m.ModuleNames[moduleid])
}

func (m BER) SayHello() {
	fmt.Printf("\n Hi from \n %v", m.Name())
}

func (m BER) Name() string {
	return "BER"
}

func (m BER) IsInitialized() bool {
	return m.isInitialized
}

func (m *BER) InitializeChip() {
	m.name = "BER"
	m.InitPins()
	m.InitModules()
}

func (m *BER) InitPins() {
	totalpins := m.InPinCount() + m.OutPinCount()
	m.Pins = make(map[string]chipset.PinInfo, totalpins)
	m.PinNames = make(map[int]string, totalpins)
	strlist := [2]string{"outputPin0", "inputPin0"}
	for cnt := 0; cnt < len(strlist); cnt++ {
		m.PinNames[cnt] = strlist[cnt]
	}

	/// something try begins
	var pinfo chipset.PinInfo

	pinfo.Name = "inputPin0"
	pinfo.Id = 0
	pinfo.InputPin = true
	pinfo.DataType = reflect.TypeOf((*gocomm.BitChannel)(nil)).Elem()

	m.Pins["inputPin0"] = pinfo

	pinfo.Name = "inputPin1"
	pinfo.Id = 1
	pinfo.InputPin = true
	pinfo.DataType = reflect.TypeOf((*gocomm.BitChannel)(nil)).Elem()

	m.Pins["inputPin1"] = pinfo

	pinfo.Name = "outputPin0"
	pinfo.Id = 2
	pinfo.InputPin = false
	pinfo.DataType = reflect.TypeOf((*gocomm.FloatChannel)(nil)).Elem()

	pinfo.CreateChannel()

	m.Pins["outputPin0"] = pinfo

	/// something try ends

}

func (m *BER) InitModules() {

	var totalModules int = 1

	/// AUTO CODE
	/// something try begins
	var minfo chipset.ModuleInfo
	m.Modules = make(map[string]chipset.ModuleInfo, totalModules)
	m.ModuleNames = make(map[int]string, totalModules)

	strlist := [1]string{"ber"}
	for cnt := 0; cnt < len(strlist); cnt++ {
		m.ModuleNames[cnt] = strlist[cnt]
	}
	var temp, otemp []int

	minfo.Name = "ber"
	minfo.Id = 0
	minfo.Desc = ""

	temp = append(temp, m.PinByName("inputPin0").Id)

	otemp = append(otemp, m.PinByName("outputPin0").Id)

	minfo.InPins = temp
	minfo.OutPins = otemp
	m.Modules["ber"] = minfo

	/// AUTO CODE

	m.isInitialized = true
}
func (m *BER) BERCountFn(inputobj gocomm.SBitObj) (berobj gocomm.SFloatObj) {
	berobj.Message = inputobj.Message + "BER"
	if m.TrueBits[m.lastIndex] != inputobj.Ch {
		m.ErrorCount++
	}
	m.lastIndex++
	berobj.TimeStamp = inputobj.TimeStamp
	berobj.Ts = inputobj.Ts
	berobj.MaxExpected = inputobj.MaxExpected
	berobj.Ch = m.ErrorCount / float64(m.lastIndex)

	return berobj
}
func (m *BER) BERCount(inputPin0 gocomm.BitChannel) {
	/// Read your data from Input channel(s) [inputPin0]
	/// And write it to OutputChannels  [outputPin0]

	outputPin0 := m.Pins["outputPin0"].Channel.(gocomm.FloatChannel)
	iters := 1
	for i := 0; i < iters; i++ {
		chData := <-inputPin0

		iters = chData.MaxExpected
		/// Do process here with chData

		outData := m.BERCountFn(chData)
		outputPin0 <- outData

	}

}
