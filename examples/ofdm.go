package main

import (
	"fmt"
	"reflect"
	"wiless/gocomm"
	"wiless/gocomm/chipset"
)

func main() {
	var customchip OFDM
	customchip.InitializeChip()
	var wowchip chipset.Chip
	wowchip = customchip

	fmt.Printf("OFDM = %#v", wowchip)
}

type OFDM struct {
	name          string
	isInitialized bool
	Pins          map[string]chipset.PinInfo
	Modules       map[string]chipset.ModuleInfo
	ModuleNames   map[int]string
	PinNames      map[int]string
}

/// AutoGenerated through script

func (m OFDM) InPinCount() int {
	return 2
}

func (m OFDM) OutPinCount() int {
	return 2
}

func (m OFDM) Pin(pid int) chipset.PinInfo {
	return m.Pins[m.PinNames[pid]]
}

func (m OFDM) PinIn(pid int) chipset.PinInfo {
	if pid >= m.InPinCount() {
		fmt.Printf("%d > No of Input Pins %d", pid, m.InPinCount())
		var result chipset.PinInfo
		result.Id = -1
		return result
	}

	return m.Pins[m.PinNames[pid]]

}
func (m OFDM) PinByID(pid int) chipset.PinInfo {

	return m.Pins[m.PinNames[pid]]
}

func (m OFDM) PinOut(pid int) chipset.PinInfo {
	if pid >= m.OutPinCount() {
		fmt.Printf("%d > No of Output Pins %d", pid, m.OutPinCount())
		var result chipset.PinInfo
		result.Id = -1
		return result
	}
	return m.Pins[m.PinNames[pid+m.InPinCount()]]

}

func (m OFDM) PinByName(pinname string) chipset.PinInfo {
	return m.Pins[pinname]
}

func (m OFDM) ModulesCount() int {
	return 2
}
func (m OFDM) ModuleByName(mname string) chipset.ModuleInfo {
	return m.Modules[mname]
}

func (m OFDM) Module(moduleid int) chipset.ModuleInfo {
	return m.ModuleByName(m.ModuleNames[moduleid])
}

func (m OFDM) SayHello() {
	fmt.Printf("\n Hi from \n %v", m.Name())
}

func (m OFDM) Name() string {
	return "OFDM"
}

func (m OFDM) IsInitialized() bool {
	return m.isInitialized
}

func (m *OFDM) InitializeChip() {
	m.name = "OFDM"
	m.InitPins()
	m.InitModules()
}

func (m *OFDM) InitPins() {
	totalpins := m.InPinCount() + m.OutPinCount()
	m.Pins = make(map[string]chipset.PinInfo, totalpins)
	m.PinNames = make(map[int]string, totalpins)
	strlist := [4]string{"inTxsymbols", "inRxsymbols", "outTxsymbols", "outRxsymbols"}
	for cnt := 0; cnt < len(strlist); cnt++ {
		m.PinNames[cnt] = strlist[cnt]
	}

	/// something try begins
	var pinfo chipset.PinInfo

	pinfo.Name = "inTxsymbols"
	pinfo.Id = 0
	pinfo.InputPin = true
	pinfo.DataType = reflect.TypeOf((*gocomm.Complex128Channel)(nil)).Elem()

	m.Pins["inTxsymbols"] = pinfo

	pinfo.Name = "inRxsymbols"
	pinfo.Id = 1
	pinfo.InputPin = true
	pinfo.DataType = reflect.TypeOf((*gocomm.Complex128Channel)(nil)).Elem()

	m.Pins["inRxsymbols"] = pinfo

	pinfo.Name = "outTxsymbols"
	pinfo.Id = 2
	pinfo.InputPin = false
	pinfo.DataType = reflect.TypeOf((*gocomm.Complex128Channel)(nil)).Elem()

	pinfo.CreateChannel()

	m.Pins["outTxsymbols"] = pinfo

	pinfo.Name = "outRxsymbols"
	pinfo.Id = 3
	pinfo.InputPin = false
	pinfo.DataType = reflect.TypeOf((*gocomm.Complex128Channel)(nil)).Elem()

	pinfo.CreateChannel()

	m.Pins["outRxsymbols"] = pinfo

	/// something try ends

}

func (m *OFDM) InitModules() {

	var totalModules int = 2

	/// AUTO CODE
	/// something try begins
	var minfo chipset.ModuleInfo
	m.Modules = make(map[string]chipset.ModuleInfo, totalModules)
	m.ModuleNames = make(map[int]string, totalModules)

	strlist := [2]string{"fft", "ifft"}
	for cnt := 0; cnt < len(strlist); cnt++ {
		m.ModuleNames[cnt] = strlist[cnt]
	}
	var temp, otemp []int

	minfo.Name = "fft"
	minfo.Id = 0
	minfo.Desc = ""

	temp = append(temp, m.PinByName("inTxsymbols").Id)

	otemp = append(otemp, m.PinByName("outTxsymbols").Id)

	minfo.InPins = temp
	minfo.OutPins = otemp
	m.Modules["fft"] = minfo

	minfo.Name = "ifft"
	minfo.Id = 1
	minfo.Desc = ""

	temp = append(temp, m.PinByName("inRxsymbols").Id)

	otemp = append(otemp, m.PinByName("outRxsymbols").Id)

	minfo.InPins = temp
	minfo.OutPins = otemp
	m.Modules["ifft"] = minfo

	/// AUTO CODE

	m.isInitialized = true
}

func (m *OFDM) fft(inTxsymbols gocomm.Complex128Channel) {
	/// Read your data from Input channel(s) [inTxsymbols]
	/// And write it to OutputChannels  [outTxsymbols]

	///	outTxsymbols:=m.Pins["outTxsymbols"].Channel.(gocomm.<DataType>)

}

func (m *OFDM) ifft(inRxsymbols gocomm.Complex128Channel) {
	/// Read your data from Input channel(s) [inRxsymbols]
	/// And write it to OutputChannels  [outRxsymbols]

	///	outRxsymbols:=m.Pins["outRxsymbols"].Channel.(gocomm.<DataType>)

}
