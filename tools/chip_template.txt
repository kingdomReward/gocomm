{{ if .WriteTestMain}}
package main
{{end}}
import (
	"fmt"
	"reflect"
	"wiless/gocomm"
	"wiless/gocomm/chipset"
	"wiless/vlib"
)

{{ if .WriteTestMain}}
func main() {
	var customchip {{.Name}}
	customchip.InitializeChip()
	var wowchip chipset.Chip
	wowchip = customchip

	fmt.Printf("{{.Name}} = %#v",wowchip)
}
{{ else }}
func init(){
	fmt.Printf("\n AutoGenerated package customchips")
}
{{ end }}

type {{.Name}} struct {
	name               string
	isInitialized      bool
	Pins               map[string]chipset.PinInfo
	Modules            map[string]chipset.ModuleInfo
	ModuleNames        map[int]string `json:"-"`
	PinNames           map[int]string `json:"-"`
}

/// AutoGenerated through script

func (m *{{.Name}}) InPinCount() int {
	return {{.InPinCount}}
}

func (m *{{.Name}}) OutPinCount() int {
	return {{.OutPinCount}}
}

func (m *{{.Name}}) Pin(pid int) chipset.PinInfo {
	return m.Pins[m.PinNames[pid]]
}

func (m *{{.Name}}) PinIn(pid int) chipset.PinInfo {
	if pid >= m.InPinCount() {
		fmt.Printf("%d > No of Input Pins %d", pid, m.InPinCount())
		var result chipset.PinInfo
		result.Id = -1
		return result
	}

	return m.Pins[m.PinNames[pid]]

}
func (m *{{.Name}}) PinByID(pid int) chipset.PinInfo {

	return m.Pins[m.PinNames[pid]]
}

func (m *{{.Name}}) PinOut(pid int) chipset.PinInfo {
	if pid >= m.OutPinCount() {
		fmt.Printf("%d > No of Output Pins %d", pid, m.OutPinCount())
		var result chipset.PinInfo
		result.Id = -1
		return result
	}
	return m.Pins[m.PinNames[pid+m.InPinCount()]]

}

func (m *{{.Name}}) PinByName(pinname string) chipset.PinInfo {
	return m.Pins[pinname]
}

func (m *{{.Name}}) ModulesCount() int {
	return {{.ModuleCount}}
}
func (m *{{.Name}}) ModuleByName(mname string) chipset.ModuleInfo {
	return m.Modules[mname]
}

func (m *{{.Name}}) Module(moduleid int) chipset.ModuleInfo {
	return m.ModuleByName(m.ModuleNames[moduleid])
}

func (m *{{.Name}}) SayHello() {
	fmt.Printf("\n Hi from \n %v", m.Name())
}

func (m *{{.Name}}) Name() string {
	return "{{.Name}}"
}

func (m *{{.Name}}) IsInitialized() bool {
	return m.isInitialized
}

func (m *{{.Name}}) InitializeChip() {
	m.name = "{{.Name}}"
	m.InitPins()
	m.InitModules()
} 


func (m *{{.Name}}) InitPins() {
	totalpins := m.InPinCount() + m.OutPinCount()
	m.Pins = make(map[string]chipset.PinInfo, totalpins)
	m.PinNames = make(map[int]string, totalpins)
	strlist := [{{.PinCount}}]string{ {{.PinNames}} }
	for cnt:=0;cnt<len(strlist);cnt++ {
	m.PinNames[cnt]=strlist[cnt]
	}


/// something try begins
	var pinfo chipset.PinInfo
{{ range $element := .Pins}}
	pinfo.Name = "{{ $element.Name}}"
	pinfo.Id = {{  $element.Id }}
	pinfo.InputPin = {{  $element.InputPin }}
	pinfo.DataType = reflect.TypeOf((*gocomm.{{$element.DataType}})(nil)).Elem()
	{{if $element.InputPin }}
	{{else}}
	pinfo.CreateChannel()
	{{ end }}
	m.Pins["{{ $element.Name}}"] = pinfo
{{ end }}

/// something try ends

 
}






func (m *{{.Name}}) InitModules() {


	var totalModules int = {{.ModuleCount}}
	 
/// AUTO CODE
/// Begin module i ----------------------------
	var minfo chipset.ModuleInfo
	m.Modules = make(map[string]chipset.ModuleInfo, totalModules)
	m.ModuleNames = make(map[int]string, totalModules)
	
	strlist := [{{.ModuleCount}}]string{ {{.ModuleNames}} }
	for cnt:=0;cnt<len(strlist);cnt++ {
	m.ModuleNames[cnt]=strlist[cnt]
	}
	var temp,otemp []int
	

{{ range $element := .Modules}}

	minfo.Name = "{{$element.Name}}"
	minfo.Id = {{  $element.Id }}
	minfo.Desc = "{{$element.Desc}}"	
	{{ range $pinname := $element.InPins}}
	temp=append(temp,m.PinByName("{{$pinname}}").Id)
	{{ end }}
{{ range $pinname := $element.OutPins}}
	otemp=append(otemp,m.PinByName("{{$pinname}}").Id)
	{{ end }}
	minfo.InPins = temp
	minfo.OutPins = otemp
	method := reflect.ValueOf(m).MethodByName("{{$element.Function}}")
	minfo.Function = method
	minfo.FunctionName = "{{$element.Function}}"

	m.Modules["{{$element.Name}}"]=minfo
	/// End module i ----------------------------
{{ end }}

/// AUTO CODE
	
m.isInitialized=true
}




{{ range $element := .Modules}}

func (m *{{$.Name}}) {{$element.Function}}({{$element.ArgString}} ) {
/// Read your data from Input channel(s) {{$element.InPins}} 
/// And write it to OutputChannels  {{$element.OutPins}}
/*
{{ range $pinname := $element.OutPins}}
///	{{$pinname}}:=m.Pins["{{$pinname}}"].Channel.(gocomm.<DataType>)
	iters := 1
	for i := 0; i < iters; i++ {
		chData := <-{{$element.InPins}}	
		iters = chData.MaxExpected	
		/// Do process here with chData

		outData:= {{$element.Function}}Fn(chData)
		outData.MaxExpected= ??
		{{$pinname}} <- outData
		
	}
	*/
{{ end }}
}

{{end}}


{{ range $element := .Modules}}

func (m *{{$.Name}}) {{$element.Function}}Fn({{$element.ArgString}} ) {
/// Read your data from Input channel(s) {{$element.InPins}} 
/// And write it to OutputChannels  {{$element.OutPins}}
/*
{{ range $pinname := $element.OutPins}}
///	{{$pinname}}:=m.Pins["{{$pinname}}"].Channel.(gocomm.<DataType>)
	iters := 1
	for i := 0; i < iters; i++ {
		chData := <-{{$element.InPins}}	
		iters = chData.MaxExpected	
		/// Do process here with chData

		outData:= m.{{$element.Function}}Fn(chData)
		{{$pinname}} <- outData
		
	}
	*/
{{ end }}
}

{{end}}












