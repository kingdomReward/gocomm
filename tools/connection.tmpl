//{{.Name}}
{{ if .WriteTestMain}}
package main
{{else}}
package core
{{end}}

import (
	//"encoding/json"
	"fmt"
	//"sort"
	"sync"
	"wiless/gocomm/core"
	//"wiless/gocomm/channel"
	"wiless/gocomm/chipset"
	//"wiless/gocomm/dsp"
	//"wiless/gocomm/sources"
	//"wiless/vlib"
)


{{ if .WriteTestMain}}
func main() {
	temp1 := NEW{{.Name}}()
	temp1.CreateChips()
	temp1.Set("DUMMY")
	//fmt.Printf("{{.Name}} = %#v",temp1)
}
{{ else }}
func init(){
	fmt.Printf("AutoGenerated package customchips")
}
{{ end }}


type {{.Name}} struct {
	uid int
	name     string
	chips    []chipset.Chip
	settings string
	// steupSetting settingVariable
	wg *sync.WaitGroup
	ready bool
}

func NEW{{.Name}}() *{{.Name}} {
	var result = new({{.Name}})
	result.name = "{{.Name}}_"+chipset.RandIndentifier(8)
	result.chips = make([]chipset.Chip,{{.Nchips}})
	result.wg = new(sync.WaitGroup)

	result.ready=false
	return result
}

func (s *{{.Name}}) String() string {
	return fmt.Sprintf("id:%s", s.name)
}

func (s *{{.Name}}) Set(jsons string) {
	if !s.ready{
	return
	}
	s.settings = jsons
	for i := 0; i < len(s.chips); i++ {
		//s.chips[i].Set(jsons)
		fmt.Println(s.chips[i],s.chips[i].Name())
		fmt.Print("\n------------------------------\n")
	}
	
}

func (s *{{.Name}}) Get() string {

	return s.settings
}

func (s *{{.Name}}) CreateChips() {
var count int =0
fmt.Print("Creating chips\n")
{{ range $element := .Chips}}

		
        {{ $element.Name}}:=new({{ $element.Type}})
        s.chips[count]={{$element.Name}}
        count=count+1
        {{$element.Name}}.InitializeChip()
        {{ $element.Name}}.SetName("{{ $element.Name}}")
{{ end }}
s.ready=true

}


	


